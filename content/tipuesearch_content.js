var tipuesearch = {"pages": [{'title': 'About', 'text': '課程名稱: 網際內容管理 - Web Content Management \n 學員作業網站:  https://mdewcm2025.github.io/hw-kevingg601/content/index.html \n 學員作業倉儲:  https://github.com/mdewcm2025/hw-kevingg601 \n \n 課程代號: wcm2025 \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入 \xa0 https://login.microsoftonline.com/ \xa0 Office 365 \n Teams 團隊代碼:\xa0 87b7bbx \n \n 課程評分: \n 1. 作業 (40%): 從 Github Classroom 取得的個人倉儲與網站, 每週必須至少提交 2 次與課程進度有關的內容. \n 作業一 (20%): 採用  nginx  建立全球資訊網伺服器 \n 在 Windows 操作系統中建立一台 WWW 伺服器 \n 在 Ubuntu 操作系統建立一台 WWW 伺服器 \n 在 虛擬主機上建立一台 WWW 伺服器 (Windows and Ubuntu) \n Virtualbox \n Vmware  最近宣布 適用於 Windows 及 Linux 的 Vmware Workstation Pro ( 17.6 ), 與適用於 MacOS 的 Vmware Fusion Pro 全面免費. \n 下載 Vmware Workstation Pro  (For Windows and Linux) - 註冊帳號後下載 VMware-workstation-full-17.6.2.exe \n 下載 Vmware Fusion Pro  (For Mac) - 註冊帳號後下載 \n 作業二 (20%): 在各種不同環境下的操作系統中配置  Reeborg\'s world \xa0( 原始碼 ) \n 2. 期中協同專案執行、簡報與報告 (三人一組) (30%) \n 專案題目: 利用 Copilot 解析  Reeborg\'s world \xa0( 原始碼 ) \n 3. 期末協同專案執行、簡報與報告\xa0(三人一組) (30%) \n 專案題目: 網際內容管理架構下的  Reeborg\'s world \xa0( 原始碼 ) \n 利用 uwsgi 配置分組學員執行 cmsimde 動態內容管理系統編輯 \n 設法將  Reeborg\'s world \xa0( 原始碼 ) 與 cmsimde 網際內容管理系統整合 \n', 'tags': '', 'url': 'About.html'}, {'title': 'list', 'text': '列出 wcm2025 學員的作業網站與倉儲 \n', 'tags': '', 'url': 'list.html'}, {'title': 'Fossil', 'text': 'Fossil \n Fossil server and Github repository: \n fossil server at C:\\repo\\wcmhw.fossil which static and dynamic site content sync with github \n C:\\repo>git clone \xa0 git@scrum1:mdewcm2025/hw-scrum-1.git \xa0 wcmhw \n cms and acp at C:\\repo\\wcmhw directory \n Fossil add, commit and push or update: \n y:\\tmp>fossil clone \xa0 https://pj2022@rocket_server/wcmhw \xa0 wcmhw.fossil \n y:\\tmp\\wd>git clone \xa0 https://github.com/mdewcm2025/hw-scrum-1.git \xa0 wcmhw \n Y:\\tmp\\wd\\wcmhw>fossil open ./../../wcmhw.fossil --force \n sync with Github: Y:\\tmp\\wd\\wcmhw>git pull \n fossil add, commit, push and update: \n Y:\\tmp\\wd\\wcmhw>fossil add . \n Y:\\tmp\\wd\\wcmhw>fossil commit -m "commited message" \n Y:\\tmp\\wd\\wcmhw>fossil push\xa0 https://pj2022@rocket_server/wcmhw \n 我自己建立fossil的過程影片 \n \n 0423_更新fossil \n \n 0515_更新fossil \n \n', 'tags': '', 'url': 'Fossil.html'}, {'title': 'Tasks', 'text': '', 'tags': '', 'url': 'Tasks.html'}, {'title': 'task1', 'text': '自行製作可攜程式系統 \n 此作業的目的在展示如何利用既有的 Python 可攜系統建立各版本的 Python 可攜環境. \n 以下為操作步驟: \n \n 下載 \xa0 portable_python311.7z , 展開後是一套尚未安裝 pip 的 Python 3.11 可攜程式環境. \n 雙點擊 portable_python311 目錄中的 start_ipv6.bat 啟動可攜系統, 在 SciTE 中開啟 Y:\\ gen_python313.py , 以下拉式功能表 Tools - Go 執行, 便可在 Y:\\ 建立 Python313 目錄. \n 接著修改 start_ipv6.bat, 利用 Search - Replace, Find 欄位填上 Python311, Replace 欄位填上 Python313 後, 按下 Replace All, 便可將啟動檔中所有 Python311 設定改為 Python313, 另存修改後的檔案為 start_python313.bat. \n 接下來以 stop.bat 關閉 start_ipv6.bat 開啟的可攜系統, 改以心建立的 start_python313.bat 開啟可攜環境, 之後在命令列輸入 python, 確認目前的 Python 版本為 3.13.2 後, 利用 Ctrl + z 退出 Python 後, 利用 pip list 確認目前的 Python 3.13.2 系統尚未配置 pip 模組管理工具. \n 在命令列中, 以 python get-pip.py 安裝 pip 工具, 完成後, 以 pip list 確認 pip.exe 已經配置完成. \n 最後在命令列中, 以 pip install flask flask_cors bs4 lxml pelican markdown 安裝 cmsimde 網際內容管理系統啟動所需的 Python 模組後, 此可攜系統中的 Python 3.13.2 套件已經可以用來維護個人作業倉儲與分組倉儲. \n 之後利用新版的 \xa0 SciTE , \xa0 Portablegit , \xa0 PUTTY , \xa0 ShareX , \xa0 Wink , \xa0 Solvespace , \xa0 Zoomit , \xa0 ProcessExplorer \xa0 以及原有的 tmp 及 home_ipv6, 以新的 start_python313 啟動. \n \n', 'tags': '', 'url': 'task1.html'}, {'title': 'task2', 'text': '使用 SSH 協定執行作業倉儲的推送 \n SSH \xa0 是一種加密的網路傳輸協定, PuTTY 則是可用於 Windows 環境的 SSH 協定工具, 其中支援遠端登入 (putty.exe) 與檔案傳輸工具 (psftp.exe). \n 使用 PuTTY 所建立的公私鑰進行 Github push 認證的步驟: \n 第一步: \n 若希望在 Windows 環境透過 git 指令, 使用 PuTTY 設定的 session (一個代表連線伺服器主機、私鑰位置與是否使用代理主機等資訊的字串), 執行 push, 必須要在啟動可攜環境時, 設定 GIT_SSH 環境變數, 將此變數指向 PuTTY 套件中的 plink.exe 位置 (也就是 set GIT_SSH=%Disk%:\\putty\\plink.exe). \n 第二步: \n 指定利用 PuTTY 的 SSH session 執行 git push 後, 必須在 Windows 操作系統中選擇一個字串, 作為 SSH 連線 session 名稱, 由於此設定必須指向 SSH 協定加密用的私鑰所在目錄位置, 因此設定 session 之前, 必須利用 puttygen.txt 建立一對公私鑰, 其中的公鑰為 OpenSSH 格式, 必須送到使用者 Github 帳號設定區 (Settings) 的 SSH and GPG keys 中. \n 第三步: \n 利用 puttygen.exe 建立公私鑰的方法, 是在執行 puttygen.exe 之後, 以滑鼠按下 Generate 之後, 讓滑鼠在 puttgen.exe 視窗中 key 下方的空白區域隨意移動, puttygen.exe 會根據滑鼠移動的位置隨機建立 OpenSSH 格式的公鑰, 以及配對的 PuTTY 格式的 Private Key (副檔名為 .ppk) \n 第四步: \n 接下來, 將 OpenSSH 格式的 Public Key 內容複製到個人 Github 帳號設定區的 SSH and GPG keys 中, 並以 puttygen.exe 執行視窗右下方的 Save private key 按鈕, 將私鑰 (假設為 myprivatekey.ppk) 存至 Y:\\. \n 第五步: \n 接著啟動 PuTTY 中的 putty.exe, 在 Host Name (or IP Address) 欄位填入 github.com, 並確認 Connection Type 選用 SSH, 表示要透過 SSH 加密協定連線到 github.com. \n 第六步: \n 接著在 putty.exe 視窗下方的 Saved Sessions 填入一組字串, 此字串就是之後要遠端登入 github.com 設定 push 連線 URL 的 session 名稱, 在此假設選擇 "mysession" 作為 session 名稱, 使用者可以自行選擇具有代表性的字串, 例如: 學號或簡短的英文姓名縮寫. \n 第七步: \n 在 putty.exe 視窗中填入 github.com 與 "mysession" 名稱之後, 點擊 Save 之後, 此 session 設定就會被 Windows 操作系統存入該台電腦的 Registry 登錄檔案中的 HKEY_CURRENT_USER - SOFTWARE - SimonTatham 所在組態區. 此時可以在命令列中輸入 regedit 後進入登錄檔查看是否 mysession 已經存在. \n 第八步: \n 上列 "mysession" 設定完成且按下 Save 之後, 若再按下 Open, 採用 IPv4 網路連線的電腦應該已經可以透過 putty.exe 遠端連線至 github.com, 視窗中會出現 github.com 作為視窗標題, 且內容為 login as: 但一般使用者並沒有帳號可以直接透過 putty.exe 遠端登入到 github.com, 而只能在 session 設定完成後, 利用此 session 執行 git push. \n 第九步: \n 由於前面的 "mysession" 雖然已經存入 Windows 操作系統的登錄檔, 但並沒有設定 private key 的位置, 因此接下來要再開啟 putty.exe, load 進此一 session, 然後在此 session 設定左方的 Category: 下方的 Connection - SSH - Auth - Credentials 設定中的 Private key file for authentication: 區, 利用 Browse 選擇位於 Y:\\ 的 myprivatekey.ppk 檔案. 選擇檔案完成後, 必須再回到 Catetory: 下方的 Session 區, 以右方的 Save 將附加私鑰位置設定的 session 存檔. 此時 Windows 登錄檔中的 "mysession" 除了代表要使用 SSH 連線到 github.com 之外, 還附帶指定了 myprivatekey.ppk 在 Y:\\ 的位置. \n 第十步: \n 若上述設定是在電腦輔助設計室中的電腦進行, 必須利用命令列 regedit 指令, 進入 HKEY_CURRENT_USER - SOFTWARE - SimonTatham 位置, 利用滑鼠右鍵將此登錄設定檔案"匯出" 存入可攜程式 start_ipv6.bat 所在目錄, 此處假設命名為 mysession.reg, 使用者可以自行對 .reg 命名. \n 第十一步: \n 由於上列的 myprivatekey.ppk 存於可攜程式中的 Y:\\, 因此當使用者利用 start_ipv6.bat 啟動可攜程式後, 就可以利用滑鼠雙點擊位於同目錄的 mysession.reg, 上述的 "mysession" 設定就會存入 Windows 操作系統的登錄檔中. \n 使用 PuTTY session 設定倉儲 .git/config 中的 URL \n 假設上列 "mysession" 對應中的 OpenSSH 格式公鑰是送到 Github 帳號為 scrum-1 學員的 SSH and GPG key 區域, 則 scrum-1 學員在啟動可攜系統後, 已經雙點擊 mysession.reg, 將前述 putty.exe 設定的 session 組態登錄設定回存至 Windows 操作系統中, 則 scrum-1 學員就可以將其近端作業倉儲中的 mysession 用於倉儲 .git/config 檔案的下方設定: \n \n \n \n \n \n \n 1 \n 2 \n 3 \n \n \n \n [remote  "origin" ] \n \xa0\xa0\xa0\xa0 url = git@mysession:mdewcm2025/hw-scrum-1.git \n \xa0\xa0\xa0\xa0 fetch = +refs/heads/:refs/remotes/origin/ \n \n \n \n \n \n \n \n 其中的 [remote "origin"] 表示當使用 git 指令中針對此倉儲 "origin" 是一個與遠端倉儲對應的字串代號, 代表其下兩項設定. url 代表此 "origin" 的倉儲連線網址, 而連線至此倉儲的協定是採遠端登入 (使用 Github 支援的 SSH 遠端登入協定), 且此遠端登入的帳號為 "git", 這是所有要使用 SSH 執行 git push 的用戶共同使用的登入帳號. \n url 設定中 "@" 之後的 "mysession" 就是宣告要使用此電腦登錄檔中所設定的 session 名稱 (代表要連線到 github.com, 且帶的 myprivatekey.ppk, 準備在登入流程中與 github.com 中 mdewcm2025 帳號下的 hw-scrum-1 倉儲擁有者 (或帶有 repo 管理權限的帳號) 所登錄的 public keys 進行認證比對, 一旦通過認證, git push 指令就可以成功將改版資料推送到指定的倉儲區域. \n', 'tags': '', 'url': 'task2.html'}, {'title': 'task2.5', 'text': 'brython.txt \n Fossil SCM 的應用 \n https://fossil-scm.org/ \xa0 \n Github 與 Fossil SCM 結合應用範例: \n \n \n \n .fossil 檔案為完整的 Fossil SCM 倉儲檔案, 而 fossil open 後的目錄內容則為特定版次 (內建為 trunk 版, 也就是倉儲中的最新版本) 內容. \n \n fossil ui .fossil 後, 可以透過 Web ui 介面修改 .fossil 倉儲的內容, 至於從 fossil open .fossil 取出的 trunk 版本內容, 在倉儲內容改版後, 可以利用 fossil add 與 fossil commit-m 將改版資料回存至近端 .fossil, 若 .fossil 是從遠端 fossil clone, 則只有在 fossil push 後, 近端的改版內容才會被推向遠端倉儲 .fossil 檔案. \n \n 若與工作目錄對應的 .fossil 倉儲檔案內容在 fossil open 之後進行改版, 則先前已經 open 的工作目錄, 可以利用 fossil update 與近端的 .fossil 倉儲內容保持同步. \n', 'tags': '', 'url': 'task2.5.html'}, {'title': 'ipv6', 'text': '根據\xa0 1a_stud.txt \xa0中的學員序號, 每位學員分配一個固定的 IPv6 網址: \n 學員序號為 1的固定 IPv6 分配: 2001:288:6004:17:fff1:cc25:0000:a010<------我的是10 \n IPv6 網路設定畫面如下: \n \n', 'tags': '', 'url': 'ipv6.html'}, {'title': 'task3', 'text': '使用 Nginx 建立全球資訊網伺服器 \n HTML 中的 CSS 與 Javascript \n Windows 環境中的 WWW server \n Ubuntu 環境中的 WWW server \n', 'tags': '', 'url': 'task3.html'}, {'title': 'task4', 'text': '配置 Reeborg 網際系統 \n 解析 Reeborg 系統架構 \n 網際內容管理中的 Reeborg \n', 'tags': '', 'url': 'task4.html'}, {'title': 'Reeborg', 'text': 'https://mdewcm2025.github.io/hw-scrum-1/reeborg \n https://github.com/mdewcm2025/hw-scrum-1/blob/main/reeborg/rb/reeborg.js \n function set_editor() {\n    "use strict";\n    if (localStorage.getItem("editor")){\n        editor.setValue(localStorage.getItem("editor"));\n    } else {\n        editor.setValue(RUR.translate("move") + "()");\n    }\n} \n 決定 editor 中的內容 \n 在 index.html 中則 editor 內容由 id="code" 變數決定 \n', 'tags': '', 'url': 'Reeborg.html'}, {'title': 'walk', 'text': 'https://s104.cycu.org/reeborg \xa0在 Other worlds 下方點選 Alone 後, 按下 run 執行下列程式: \n for i in range(4):\n    for j in range(9):\n        move()\n    turn_left() \n \n', 'tags': '', 'url': 'walk.html'}, {'title': 'Tutorial', 'text': "https://aroberge.gitbooks.io/reeborg-s-world-advanced-world-creation/content/ \xa0 是《Reeborg的世界：教師指南》的線上書籍，旨在幫助教師利用 Reeborg 的世界（一個用於學習編程的平台）創建編程任務。作者 André Roberge 假設讀者具備 Python 或 JavaScript 的編程基礎，並主要使用 Python 範例進行講解。書籍介紹如何使用 Reeborg 的進階 API 設計更具挑戰性的世界，適合已熟悉基本界面並希望深入探索的教師。內容從基礎世界編輯開始，逐步加快 pace，並建議讀者在網站上運行範例以理解動態效果。後半部分提供簡要說明及附錄，包括範例世界列表。作者鼓勵教師分享自創世界，並提到自己是物理學背景，編程為自學愛好，Reeborg 的發展始於 2004 年的 RUR-PLE 項目。書籍免費線上提供，旨在促進編程教育。 \n 以下是《Reeborg 的世界：教師指南》各章節的概要內容： \n 簡介 (Introduction) \n 概述書籍目的，幫助教師使用Reeborg的世界進階功能創建編程任務。假設讀者熟悉 Python 或 JavaScript，並介紹以 Python 為主的範例。強調適合進階用戶，並建議搭配網站實作。 \n 世界編輯器簡介 (Introduction to the world editor) \n 介紹 Reeborg 世界編輯器的基本操作，如何創建和修改簡單的世界，作為進階設計的起點。 \n 第一個簡單的範例世界 (A first simple example world) \n 提供一個基礎範例，展示如何使用編輯器設置任務環境，並解釋其運作原理。 \n 加速步伐 (Picking up the pace) \n 進入更複雜的世界設計，介紹進階API功能，幫助教師快速構建具挑戰性的任務。 \n 剩下的內容 (The rest) \n 概述後續內容結構，提供簡要說明，涵蓋更多進階設計技巧和注意事項。 \n 附錄：範例世界列表 (Appendix: list of example worlds) \n 列出書中提到的範例世界，供讀者參考和測試。 \n \n \n 以下是《Reeborg的世界：教師指南》各章節中小節的簡要內容說明： \n 1. 簡介 (Introduction) \n \n 目的與對象 ：介紹書籍目標，幫助教師使用Reeborg進階功能設計編程任務，假設讀者具備Python或JavaScript基礎。 \n 技術假設 ：說明以Python為主，少量JavaScript，並建議熟悉基本界面後閱讀。 \n 學習建議 ：鼓勵搭配網站實作範例，理解動態效果。 \n \n 2. 世界編輯器簡介 (Introduction to the world editor) \n \n 編輯器概覽 ：介紹世界編輯器的介面與基本功能。 \n 基本操作 ：講解如何新增、移除元素（如牆壁、目標物）來創建簡單世界。 \n 儲存與測試 ：說明如何儲存設計並在Reeborg平台測試。 \n \n 3. 第一個簡單的範例世界 (A first simple example world) \n \n 範例介紹 ：展示一個簡單世界的設計，例如迷宮或收集物品任務。 \n 步驟分解 ：逐步解釋如何使用編輯器設置環境與任務條件。 \n 程式範例 ：提供對應的Python程式碼，展示Reeborg如何完成任務。 \n \n 4. 加速步伐 (Picking up the pace) \n \n 進階API介紹 ：講解更高階的API功能，如自訂物件、條件與動態變化。 \n 複雜世界設計 ：展示如何設計具挑戰性的任務，例如多條件或隨機元素。 \n 效率技巧 ：提供快速構建世界的方法與最佳實踐。 \n \n 5. 剩下的內容 (The rest) \n \n 內容概述 ：簡述後續未詳述的主題，作為進階設計的補充。 \n 實用建議 ：提供設計時的注意事項與常見問題解答。 \n 延伸資源 ：提及如何尋找更多靈感或支援。 \n \n 6. 附錄：範例世界列表 (Appendix: list of example worlds) \n \n 範例清單 ：列出書中出現的世界名稱與簡介。 \n 參考指引 ：提供如何在網站上找到並測試這些範例的指引。 \n \n \n 我假設您指的是 Reeborg's World，這是一個用於教授程式設計（特別是 Python）的教育平台，最初由 André Roberge 開發。如果您想從 Reeborg 的原始碼建立一個可以在瀏覽器中運行的系統，我將提供一個逐步指南。請注意，這需要對 Web 開發（HTML、JavaScript 和 Python）有一定的了解，並假設您已經取得了 Reeborg 的開源程式碼（例如從其 GitHub 儲存庫）。 \n \n 我假設您指的是 Reeborg's World，這是一個用於教授程式設計（特別是 Python）的教育平台，最初由 André Roberge 開發。如果您想從 Reeborg 的原始碼建立一個可以在瀏覽器中運行的系統，我將提供一個逐步指南。請注意，這需要對 Web 開發（HTML、JavaScript 和 Python）有一定的了解，並假設您已經取得了 Reeborg 的開源程式碼（例如從其 GitHub 儲存庫）。 \n Reeborg 開發相關倉儲: \n https://github.com/scrum-1/JavaScript30 \n https://github.com/scrum-1/reeborg \n https://github.com/scrum-1/reeborg-dist \n https://github.com/scrum-1/reeborg-docs \n https://github.com/scrum-1/ideas \n https://github.com/scrum-1/mathematicalpython \n \n \n \n", 'tags': '', 'url': 'Tutorial.html'}, {'title': 'reeborg(期末)', 'text': '檔案都放在倉儲目錄的downloads下 ---> 連結 \n 水平收割機器人: \n 水平收割 \xa0<------------連結在這裡 \n \n 螺旋收割機器人: \n 螺旋收割 \xa0<------------連結在這裡 \n', 'tags': '', 'url': 'reeborg(期末).html'}, {'title': 'Homework', 'text': "1. 作業 (40%): 從 Github Classroom 取得的個人倉儲與網站, 每週必須至少提交 2 次與課程進度有關的內容. \n 作業一 (20%): 採用  nginx  建立全球資訊網伺服器 \n 在 Windows 操作系統中建立一台 WWW 伺服器---> 完成 \n \n 作業二 (20%): 在各種不同環境下的操作系統中配置  Reeborg's world \xa0( 原始碼 ) \n \xa0 \xa0 \xa0 \xa0windows上配置---> 完成 \n \n \n 詳情在Homework底下的HW1、HW2呈現", 'tags': '', 'url': 'Homework.html'}, {'title': 'HW1', 'text': '作業一 (20%): 採用 \xa0 nginx \xa0 建立全球資訊網伺服器 \n 在 Windows 操作系統中建立一台 WWW 伺服器 \n 在 Ubuntu 操作系統建立一台 WWW 伺服器 \n 在 虛擬主機上建立一台 WWW 伺服器 (Windows and Ubuntu) \n \n 下載 \xa0 http://229.cycu.org/win10.vdi , 在電腦中啟動 Virtualbox 後新增虛擬主機. \n 採用 win10.vdi 建立虛擬主機後, 將網路設為橋接後啟動. \n 登入後進入控制台利用個人的 IPv6 網址設定網路連線後, 在虛擬主機中下載安裝 \xa0 nginx \xa0 後測試是否可以正常從實體主機中連線. \n http://229.cycu.org/certbot.7z \xa0設定 https \n git clone\xa0 https://github.com/mdecycu/reeborg.git \xa0放入 nginx 系統中的 html 目錄 \n 利用\xa0 http://localhost/reeborg/?lang=en&mode=python&menu=/reeborg/worlds/menus/select_collection_en.json&name=Alone&url=/reeborg/worlds/tutorial_en/harvest1.json&editor=https://mdewcm2025.github.io/hw-scrum-1/python/harvest1.py \xa0進行測試. \n 就機械設計的專業而言, 之後可以用來開發類似:\xa0 https://github.com/youandvern/efficalc \xa0 \n \n 操作步驟 (Windows) : \n http://229.cycu.org/ubuntu.vdi \xa0 \n http://229.cycu.org/win10.vdi \xa0 \n 利用 \xa0 https://mde.tw/wcm2025/content/IPv6.html \xa0 中所分配的 IPv6 網址建立 Windows 與 Ubuntu 主機, 配置 nginx 伺服器. \n Virtualbox \n \n \n 成功使用nginx建立建立全球資訊網伺服器，並可以執行拔蘿蔔程式 \n \n 新增一張使用w10.mde.nfu.edu.tw進入nginx的圖片 \n \n \n 要先啟動nginx，再進到tmp/site --->python start_waitress.py ⭣⭣⭣ \n 使用nginx 取得w10.mde.nfu.edu.tw的https簽章 並成功用waitress啟動作業倉儲的動態網站⭣⭣⭣ \n \n \n 最後還有設定nginx.conf 讓我可以使用https://w10.mde.nfu.edu.tw/reeborg/ 連結到nginx/html/reeborg/\xa0 \n worker_processes  1;\n\n# 【更改】使用真實路徑來指定日誌檔案位置\nerror_log  D:/kmolab/portable_wcm2025/data/nginx-1.28.0/logs/error.log notice;\n\nevents {\n    worker_connections  1024;\n}\n \nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n \n    # 服務 HTTP (port 80) 的靜態網站\n    server {\n        listen       80;\n        listen       [::]:80;\n        \n        server_name  w10.mde.nfu.edu.tw;\n \n        # 【保持不變】這個路徑本來就是正確的\n        root   D:/kmolab/portable_wcm2025/data/tmp/site;\n        index  index.html;\n \n        location / {\n            try_files $uri $uri/ =404;\n        }\n    }\n \n    # 服務 HTTPS (port 443) 的動態網站 + Reeborg\n    server {\n        listen       443 ssl http2;\n        listen       [::]:443 ssl http2;\n        \n        server_name  w10.mde.nfu.edu.tw;\n \n        ssl_certificate      fullchain.pem;\n        ssl_certificate_key  privkey.pem;\n        ssl_protocols        TLSv1.2 TLSv1.3;\n        ssl_ciphers          HIGH:!aNULL:!MD5;\n \n        # 【更改】為 /reeborg/ 設定真實的物理路徑\n        location /reeborg/ {\n            alias D:/kmolab/portable_wcm2025/data/nginx-1.28.0/html/reeborg/;\n            index index.html index.htm;\n            try_files $uri $uri/ =404;\n        }\n \n        # 原有的設定：將其他所有請求轉發給後端 Python 程式\n        location / {\n            proxy_pass         http://[::1]:8080;\n            proxy_set_header   Host $host;\n            proxy_set_header   X-Real-IP $remote_addr;\n            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header   X-Forwarded-Proto $scheme;\n        }\n    }\n} \n 操作步驟 (Ubuntu) : \n \n 下載 \xa0 http://229.cycu.org/ubuntu.vdi , 在電腦中啟動 Virtualbox 後新增虛擬主機. \n 採用 Ubuntu.vdi 建立虛擬主機後, 將網路設為橋接後啟動. \n 登入後進入控制台利用個人的 IPv6 網址設定網路連線後, 在虛擬主機中下載安裝 \xa0 nginx \xa0 後測試是否可以正常從實體主機中連線. (例如: \xa0 http://stud.cycu.org/ ) \n Ubuntu 網路設定位於 /etc/netplan/ net.yaml , 利用 vi 編輯器設定完成後, 以 sudo netplan apply 讓設定生效. \n 安裝 nginx, sudo apt install nginx, 之後設定檔案位於 /etc/nginx/sites-available/ default \n 修改 nginx 設定後, 以 sudo service nginx restart 重新啟動. (測試是否可以連線至: http://wxx.mde.nfu.edu.tw 或 https://wxx.mde.nfu.edu.tw) \n \n 建立 github_帳號.github.io 倉儲與網站 : \n \n 在 Github 中建立以帳號為名的 github.io, 將自動啟動 Github Pages 設定 (自動設定為與倉儲同名的網站) \n 登入 Github 後, 連線至 \xa0 https://github.com/mdecycu/cmsimde_site, \xa0 Use this template 建立名稱為 github_帳號.github.io 倉儲. \n 在 Codespaces 或近端維護 github_帳號.github.io (例如: scrum-1.github.io). \n 在個人網站中建立 About, Courses, Certificates, Licenses, Contests, Misc 等 H1 頁面, 其中 About 可以放入個人簡介, Courses 則放入個人所修過課程的簡介與心得 (或成績), Certificates 放入各式英檢的內容, Licenses 則放入專業證照與實習項目介紹. Contests 則放入個人或團隊參賽紀錄. Misc 則放入尚未整理的瑣碎資料. \n 個人網頁中的 Blog 可以詳細記錄個人參與的事件過程, Reveal.js 則放入個人的線上簡報內容 \n \n Vmware \xa0 最近宣布 適用於 Windows 及 Linux 的 Vmware Workstation Pro ( 17.6 ), 與適用於 MacOS 的 Vmware Fusion Pro 全面免費. \n 下載 Vmware Workstation Pro \xa0 (For Windows and Linux) - 註冊帳號後下載 VMware-workstation-full-17.6.2.exe \n 下載 Vmware Fusion Pro \xa0 (For Mac) - 註冊帳號後下載', 'tags': '', 'url': 'HW1.html'}, {'title': 'HW2', 'text': "作業二 (20%): 在各種不同環境下的操作系統中配置  Reeborg's world \xa0( 原始碼 ) \n \n 目前只有在windows上配置 Reeborg's world \n", 'tags': '', 'url': 'HW2.html'}, {'title': 'VirtualBox', 'text': '', 'tags': '', 'url': 'VirtualBox.html'}, {'title': 'win10', 'text': '使用VirtualBox建立一個win10虛擬主機 \n \n', 'tags': '', 'url': 'win10.html'}, {'title': 'Midterm', 'text': "2. 期中協同專案執行、簡報與報告 (三人一組) (30%) \n 專案題目: 利用 Copilot 解析  Reeborg's world \xa0( 原始碼 ) \n 最新版_v2 期中報告: \n \n \n 舊版_v1 期中報告: 網際內容管理期中報告.pptx \n \n", 'tags': '', 'url': 'Midterm.html'}, {'title': 'Final', 'text': "3. 期末協同專案執行、簡報與報告\xa0(三人一組) (30%) \n 專案題目: 網際內容管理架構下的  Reeborg's world \xa0( 原始碼 ) \n 利用 uwsgi 配置分組學員執行 cmsimde 動態內容管理系統編輯 \n 設法將  Reeborg's world \xa0( 原始碼 ) 與 cmsimde 網際內容管理系統整合 \n \n 在 Windows 操作系統以 Nginx + waitress 配置分組倉儲的動態編輯系統與靜態內容檢視系統: \n \n 之前設定的Nginx 伺服器, 是用來 Proxy 代理由 waitress 所啟動的 http 動態編輯系統 \n 啟動可攜 Python 程式系統, 確定能在 localhost 啟動分組動態編輯網站, 同時也能透過 init.py 的設定, 以組長的網域啟動 \n 在可攜系統中安裝 waitress 模組: pip install waitress \n 修改 nginx.conf, 設法利用組長的 IPv6 網路位址對應的符號名稱, 以及 fullchain.pem + privkey.pem 啟動伺服器, 並從 waitress 啟動的 port 8080 代理至 IPv6 為主的 https port 443 \n 先以 waitress 在 localhost port 8080 啟動分組動態編輯網站後, 啟動 Nginx \n 測試是否可利用 https, 以 mde.nfu.edu.tw 網域對應的伺服器名稱進行連線 \n \n 這裡使用 waitress啟動+nginx啟動,就可以使用我的 https://w10.mde.nfu.edu.tw 啟動動態編輯網頁,而使用http則是設定成靜態網頁,這個部分還可以使用\xa0https://w10.mde.nfu.edu.tw/reeborg/\xa0啟動器人網頁。---> 這個部分都在Homework底下的HW1有詳細的說明 \n \n \n \n", 'tags': '', 'url': 'Final.html'}, {'title': 'Brython', 'text': '1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n', 'tags': '', 'url': 'Brython.html'}]};