<h1>About</h1>
<p>課程名稱: 網際內容管理 - Web Content Management</p>
<p>學員作業網站: <a href="https://mdewcm2025.github.io/hw-kevingg601/content/index.html">https://mdewcm2025.github.io/hw-kevingg601/content/index.html</a></p>
<p>學員作業倉儲: <a href="https://github.com/mdewcm2025/hw-kevingg601">https://github.com/mdewcm2025/hw-kevingg601</a></p>
<hr/>
<p>課程代號: wcm2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>87b7bbx</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">1. 作業 (40%): 從 Github Classroom 取得的個人倉儲與網站, 每週必須至少提交 2 次與課程進度有關的內容.</p>
<p style="padding-left: 60px;">作業一 (20%): 採用 <a href="https://nginx.org/">nginx</a> 建立全球資訊網伺服器</p>
<p style="padding-left: 90px;">在 Windows 操作系統中建立一台 WWW 伺服器</p>
<p style="padding-left: 90px;">在 Ubuntu 操作系統建立一台 WWW 伺服器</p>
<p style="padding-left: 90px;">在 虛擬主機上建立一台 WWW 伺服器 (Windows and Ubuntu)</p>
<p style="padding-left: 120px;">Virtualbox</p>
<p style="padding-left: 120px;">Vmware <a href="https://blogs.vmware.com/cloud-foundation/2024/11/11/vmware-fusion-and-workstation-are-now-free-for-all-users/">最近宣布</a>適用於 Windows 及 Linux 的 Vmware Workstation Pro (<a href="https://docs.vmware.com/en/VMware-Workstation-Pro/17.6/rn/vmware-workstation-176-pro-release-notes/index.html">17.6</a>), 與適用於 MacOS 的 Vmware Fusion Pro 全面免費.</p>
<p style="padding-left: 120px;"><a href="https://support.broadcom.com/group/ecx/productdownloads?subfamily=VMware+Workstation+Pro">下載 Vmware Workstation Pro</a> (For Windows and Linux) - 註冊帳號後下載 VMware-workstation-full-17.6.2.exe</p>
<p style="padding-left: 120px;"><a href="https://support.broadcom.com/group/ecx/productdownloads?subfamily=VMware+Fusion">下載 Vmware Fusion Pro</a> (For Mac) - 註冊帳號後下載</p>
<p style="padding-left: 60px;">作業二 (20%): 在各種不同環境下的操作系統中配置 <a href="https://mde.tw/reeborg/world.html">Reeborg's world</a> (<a href="https://github.com/mdecycu/reeborg">原始碼</a>)</p>
<p style="padding-left: 30px;">2. 期中協同專案執行、簡報與報告 (三人一組) (30%)</p>
<p style="padding-left: 60px;">專案題目: 利用 Copilot 解析 <a href="https://mde.tw/reeborg/world.html">Reeborg's world</a> (<a href="https://github.com/mdecycu/reeborg">原始碼</a>)</p>
<p style="padding-left: 30px;">3. 期末協同專案執行、簡報與報告 (三人一組) (30%)</p>
<p style="padding-left: 60px;"><span>專案題目: 網際內容管理架構下的 <a href="https://mde.tw/reeborg/world.html">Reeborg's world</a> (<a href="https://github.com/mdecycu/reeborg">原始碼</a>)<br/></span></p>
<p style="padding-left: 90px;">利用 uwsgi 配置分組學員執行 cmsimde 動態內容管理系統編輯</p>
<p style="padding-left: 90px;">設法將 <a href="https://mde.tw/reeborg/world.html">Reeborg's world</a> (<a href="https://github.com/mdecycu/reeborg">原始碼</a>) 與 cmsimde 網際內容管理系統整合</p>
<h2>list</h2>
<p><a href="https://mdewcm2025.github.io/hw-scrum-1/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/9f3df9d865a7ceca8e799ee9b1a31602/raw/f19c5033f3f82c47351ae50bac01904dd35140de/list_1a.py">列出 wcm2025 學員的作業網站與倉儲</a></p>
<h2>Fossil</h2>
<p><span>Fossil</span></p>
<p>Fossil server and Github repository:</p>
<p>fossil server at C:\repo\wcmhw.fossil which static and dynamic site content sync with github</p>
<p>C:\repo&gt;git clone<span> </span><a href="mailto:git@scrum1:mdewcm2025/hw-scrum-1.git">git@scrum1:mdewcm2025/hw-scrum-1.git</a><span> </span>wcmhw</p>
<p>cms and acp at C:\repo\wcmhw directory</p>
<p>Fossil add, commit and push or update:</p>
<p>y:\tmp&gt;fossil clone<span> </span><a href="https://pj2022@rocket_server/wcmhw">https://pj2022@rocket_server/wcmhw</a><span> </span>wcmhw.fossil</p>
<p>y:\tmp\wd&gt;git clone<span> </span><a href="https://github.com/mdewcm2025/hw-scrum-1.git">https://github.com/mdewcm2025/hw-scrum-1.git</a><span> </span>wcmhw</p>
<p>Y:\tmp\wd\wcmhw&gt;fossil open ./../../wcmhw.fossil --force</p>
<p>sync with Github: Y:\tmp\wd\wcmhw&gt;git pull</p>
<p>fossil add, commit, push and update:</p>
<p>Y:\tmp\wd\wcmhw&gt;fossil add .</p>
<p>Y:\tmp\wd\wcmhw&gt;fossil commit -m "commited message"</p>
<p>Y:\tmp\wd\wcmhw&gt;fossil push <a href="https://pj2022@rocket_server/wcmhw">https://pj2022@rocket_server/wcmhw</a></p>
<p>我自己建立fossil的過程影片</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="720" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/BkQ2lUokxWg?si=o3tbmH1Dg0SxjmA-" title="YouTube video player" width="1280"></iframe></p>
<p><span>0423_更新fossil</span></p>
<p><img alt="" height="404" src="/images/螢幕擷取畫面 2025-04-23 150030.png" width="800"/></p>
<p><span>0515_更新fossil</span></p>
<p><span><img alt="" height="688" src="/images/螢幕擷取畫面 2025-05-15 114020.png" width="760"/></span></p>
<h1>Tasks</h1>
<h2>task1</h2>
<h4>自行製作可攜程式系統</h4>
<p>此作業的目的在展示如何利用既有的 Python 可攜系統建立各版本的 Python 可攜環境.</p>
<p>以下為操作步驟:</p>
<ol>
<li>下載<span> </span><a href="http://229.cycu.org/portable_python311.7z">portable_python311.7z</a>, 展開後是一套尚未安裝 pip 的 Python 3.11 可攜程式環境.</li>
<li>雙點擊 portable_python311 目錄中的 start_ipv6.bat 啟動可攜系統, 在 SciTE 中開啟 Y:\<a href="https://mdewcm2025.github.io/hw-scrum-1/downloads/gen_python313.py">gen_python313.py</a>, 以下拉式功能表 Tools - Go 執行, 便可在 Y:\ 建立 Python313 目錄.</li>
<li>接著修改 start_ipv6.bat, 利用 Search - Replace, Find 欄位填上 Python311, Replace 欄位填上 Python313 後, 按下 Replace All, 便可將啟動檔中所有 Python311 設定改為 Python313, 另存修改後的檔案為 start_python313.bat.</li>
<li>接下來以 stop.bat 關閉 start_ipv6.bat 開啟的可攜系統, 改以心建立的 start_python313.bat 開啟可攜環境, 之後在命令列輸入 python, 確認目前的 Python 版本為 3.13.2 後, 利用 Ctrl + z 退出 Python 後, 利用 pip list 確認目前的 Python 3.13.2 系統尚未配置 pip 模組管理工具.</li>
<li>在命令列中, 以 python get-pip.py 安裝 pip 工具, 完成後, 以 pip list 確認 pip.exe 已經配置完成.</li>
<li>最後在命令列中, 以 pip install flask flask_cors bs4 lxml pelican markdown 安裝 cmsimde 網際內容管理系統啟動所需的 Python 模組後, 此可攜系統中的 Python 3.13.2 套件已經可以用來維護個人作業倉儲與分組倉儲.</li>
<li>之後利用新版的<span> </span><a href="https://www.scintilla.org/SciTEDownload.html">SciTE</a>,<span> </span><a href="https://git-scm.com/downloads/win">Portablegit</a>,<span> </span><a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">PUTTY</a>,<span> </span><a href="https://github.com/ShareX/ShareX/releases">ShareX</a>,<span> </span><a href="https://www.debugmode.com/wink.html">Wink</a>,<span> </span><a href="https://solvespace.com/download.pl">Solvespace</a>,<span> </span><a href="https://learn.microsoft.com/zh-tw/sysinternals/downloads/zoomit">Zoomit</a>,<span> </span><a href="https://learn.microsoft.com/zh-tw/sysinternals/downloads/process-explorer#download">ProcessExplorer</a><span> </span>以及原有的 tmp 及 home_ipv6, 以新的 start_python313 啟動.</li>
</ol>
<h2>task2</h2>
<h4>使用 SSH 協定執行作業倉儲的推送</h4>
<p><a href="https://zh.wikipedia.org/zh-tw/Secure_Shell">SSH</a><span> </span>是一種加密的網路傳輸協定, PuTTY 則是可用於 Windows 環境的 SSH 協定工具, 其中支援遠端登入 (putty.exe) 與檔案傳輸工具 (psftp.exe).</p>
<p>使用 PuTTY 所建立的公私鑰進行 Github push 認證的步驟:</p>
<p>第一步:</p>
<p>若希望在 Windows 環境透過 git 指令, 使用 PuTTY 設定的 session (一個代表連線伺服器主機、私鑰位置與是否使用代理主機等資訊的字串), 執行 push, 必須要在啟動可攜環境時, 設定 GIT_SSH 環境變數, 將此變數指向 PuTTY 套件中的 plink.exe 位置 (也就是 set GIT_SSH=%Disk%:\putty\plink.exe).</p>
<p>第二步:</p>
<p>指定利用 PuTTY 的 SSH session 執行 git push 後, 必須在 Windows 操作系統中選擇一個字串, 作為 SSH 連線 session 名稱, 由於此設定必須指向 SSH 協定加密用的私鑰所在目錄位置, 因此設定 session 之前, 必須利用 puttygen.txt 建立一對公私鑰, 其中的公鑰為 OpenSSH 格式, 必須送到使用者 Github 帳號設定區 (Settings) 的 SSH and GPG keys 中.</p>
<p>第三步:</p>
<p>利用 puttygen.exe 建立公私鑰的方法, 是在執行 puttygen.exe 之後, 以滑鼠按下 Generate 之後, 讓滑鼠在 puttgen.exe 視窗中 key 下方的空白區域隨意移動, puttygen.exe 會根據滑鼠移動的位置隨機建立 OpenSSH 格式的公鑰, 以及配對的 PuTTY 格式的 Private Key (副檔名為 .ppk)</p>
<p>第四步:</p>
<p>接下來, 將 OpenSSH 格式的 Public Key 內容複製到個人 Github 帳號設定區的 SSH and GPG keys 中, 並以 puttygen.exe 執行視窗右下方的 Save private key 按鈕, 將私鑰 (假設為 myprivatekey.ppk) 存至 Y:\.</p>
<p>第五步:</p>
<p>接著啟動 PuTTY 中的 putty.exe, 在 Host Name (or IP Address) 欄位填入 github.com, 並確認 Connection Type 選用 SSH, 表示要透過 SSH 加密協定連線到 github.com.</p>
<p>第六步:</p>
<p>接著在 putty.exe 視窗下方的 Saved Sessions 填入一組字串, 此字串就是之後要遠端登入 github.com 設定 push 連線 URL 的 session 名稱, 在此假設選擇 "mysession" 作為 session 名稱, 使用者可以自行選擇具有代表性的字串, 例如: 學號或簡短的英文姓名縮寫.</p>
<p>第七步:</p>
<p>在 putty.exe 視窗中填入 github.com 與 "mysession" 名稱之後, 點擊 Save 之後, 此 session 設定就會被 Windows 操作系統存入該台電腦的 Registry 登錄檔案中的 HKEY_CURRENT_USER - SOFTWARE - SimonTatham 所在組態區. 此時可以在命令列中輸入 regedit 後進入登錄檔查看是否 mysession 已經存在.</p>
<p>第八步:</p>
<p>上列 "mysession" 設定完成且按下 Save 之後, 若再按下 Open, 採用 IPv4 網路連線的電腦應該已經可以透過 putty.exe 遠端連線至 github.com, 視窗中會出現 github.com 作為視窗標題, 且內容為 login as: 但一般使用者並沒有帳號可以直接透過 putty.exe 遠端登入到 github.com, 而只能在 session 設定完成後, 利用此 session 執行 git push.</p>
<p>第九步:</p>
<p>由於前面的 "mysession" 雖然已經存入 Windows 操作系統的登錄檔, 但並沒有設定 private key 的位置, 因此接下來要再開啟 putty.exe, load 進此一 session, 然後在此 session 設定左方的 Category: 下方的 Connection - SSH - Auth - Credentials 設定中的 Private key file for authentication: 區, 利用 Browse 選擇位於 Y:\ 的 myprivatekey.ppk 檔案. 選擇檔案完成後, 必須再回到 Catetory: 下方的 Session 區, 以右方的 Save 將附加私鑰位置設定的 session 存檔. 此時 Windows 登錄檔中的 "mysession" 除了代表要使用 SSH 連線到 github.com 之外, 還附帶指定了 myprivatekey.ppk 在 Y:\ 的位置.</p>
<p>第十步:</p>
<p>若上述設定是在電腦輔助設計室中的電腦進行, 必須利用命令列 regedit 指令, 進入 HKEY_CURRENT_USER - SOFTWARE - SimonTatham 位置, 利用滑鼠右鍵將此登錄設定檔案"匯出" 存入可攜程式 start_ipv6.bat 所在目錄, 此處假設命名為 mysession.reg, 使用者可以自行對 .reg 命名.</p>
<p>第十一步:</p>
<p>由於上列的 myprivatekey.ppk 存於可攜程式中的 Y:\, 因此當使用者利用 start_ipv6.bat 啟動可攜程式後, 就可以利用滑鼠雙點擊位於同目錄的 mysession.reg, 上述的 "mysession" 設定就會存入 Windows 操作系統的登錄檔中.</p>
<p>使用 PuTTY session 設定倉儲 .git/config 中的 URL</p>
<p>假設上列 "mysession" 對應中的 OpenSSH 格式公鑰是送到 Github 帳號為 scrum-1 學員的 SSH and GPG key 區域, 則 scrum-1 學員在啟動可攜系統後, 已經雙點擊 mysession.reg, 將前述 putty.exe 設定的 session 組態登錄設定回存至 Windows 操作系統中, 則 scrum-1 學員就可以將其近端作業倉儲中的 mysession 用於倉儲 .git/config 檔案的下方設定:</p>
<div>
<div class="syntaxhighlighter js" id="highlighter_436678">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="js plain">[remote </code><code class="js string">"origin"</code><code class="js plain">]</code></div>
<div class="line number2 index1 alt1"><code class="js spaces">    </code><code class="js plain">url = git@mysession:mdewcm2025/hw-scrum-1.git</code></div>
<div class="line number3 index2 alt2"><code class="js spaces">    </code><code class="js plain">fetch = +refs/heads/:refs/remotes/origin/</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>其中的 [remote "origin"] 表示當使用 git 指令中針對此倉儲 "origin" 是一個與遠端倉儲對應的字串代號, 代表其下兩項設定. url 代表此 "origin" 的倉儲連線網址, 而連線至此倉儲的協定是採遠端登入 (使用 Github 支援的 SSH 遠端登入協定), 且此遠端登入的帳號為 "git", 這是所有要使用 SSH 執行 git push 的用戶共同使用的登入帳號.</p>
<p>url 設定中 "@" 之後的 "mysession" 就是宣告要使用此電腦登錄檔中所設定的 session 名稱 (代表要連線到 github.com, 且帶的 myprivatekey.ppk, 準備在登入流程中與 github.com 中 mdewcm2025 帳號下的 hw-scrum-1 倉儲擁有者 (或帶有 repo 管理權限的帳號) 所登錄的 public keys 進行認證比對, 一旦通過認證, git push 指令就可以成功將改版資料推送到指定的倉儲區域.</p>
<h2>task2.5</h2>
<p><a href="https://mdewcm2025.github.io/hw-scrum-1/downloads/brython.txt">brython.txt</a></p>
<p>Fossil SCM 的應用</p>
<p><a href="https://fossil-scm.org/">https://fossil-scm.org/</a> </p>
<p>Github 與 Fossil SCM 結合應用範例:</p>
<p></p>
<p></p>
<p></p>
<div class="winkVideoContainerClass">.fossil 檔案為完整的 Fossil SCM 倉儲檔案, 而 fossil open 後的目錄內容則為特定版次 (內建為 trunk 版, 也就是倉儲中的最新版本) 內容.</div>
<div class="winkVideoContainerClass"></div>
<div class="winkVideoContainerClass">fossil ui .fossil 後, 可以透過 Web ui 介面修改 .fossil 倉儲的內容, 至於從 fossil open .fossil 取出的 trunk 版本內容, 在倉儲內容改版後, 可以利用 fossil add 與 fossil commit-m 將改版資料回存至近端 .fossil, 若 .fossil 是從遠端 fossil clone, 則只有在 fossil push 後, 近端的改版內容才會被推向遠端倉儲 .fossil 檔案.</div>
<div class="winkVideoContainerClass"></div>
<div class="winkVideoContainerClass">若與工作目錄對應的 .fossil 倉儲檔案內容在 fossil open 之後進行改版, 則先前已經 open 的工作目錄, 可以利用 fossil update 與近端的 .fossil 倉儲內容保持同步.</div>
<h3>ipv6</h3>
<p>根據 <a href="https://mdewcm2025.github.io/hw-scrum-1/downloads/1a_stud.txt">1a_stud.txt</a> 中的學員序號, 每位學員分配一個固定的 IPv6 網址:</p>
<p>學員序號為 1的固定 IPv6 分配: 2001:288:6004:17:fff1:cc25:0000:a010&lt;------我的是10</p>
<p>IPv6 網路設定畫面如下:</p>
<p><img alt="" height="643" src="/images/螢幕擷取畫面 2025-03-20 100951.png" width="779"/></p>
<h2>task3</h2>
<h4>使用 Nginx 建立全球資訊網伺服器</h4>
<h4>HTML 中的 CSS 與 Javascript</h4>
<h4>Windows 環境中的 WWW server</h4>
<h4>Ubuntu 環境中的 WWW server</h4>
<h2>task4</h2>
<h4>配置 Reeborg 網際系統</h4>
<h4>解析 Reeborg 系統架構</h4>
<h4>網際內容管理中的 Reeborg</h4>
<h1>Reeborg</h1>
<p><a href="https://mdewcm2025.github.io/hw-scrum-1/reeborg">https://mdewcm2025.github.io/hw-scrum-1/reeborg</a></p>
<p><a href="https://github.com/mdewcm2025/hw-scrum-1/blob/main/reeborg/rb/reeborg.js">https://github.com/mdewcm2025/hw-scrum-1/blob/main/reeborg/rb/reeborg.js</a></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">function set_editor() {
    "use strict";
    if (localStorage.getItem("editor")){
        editor.setValue(localStorage.getItem("editor"));
    } else {
        editor.setValue(RUR.translate("move") + "()");
    }
}</pre>
<p>決定 editor 中的內容</p>
<p>在 index.html 中則 editor 內容由 id="code" 變數決定</p>
<h2>walk</h2>
<p><a href="https://s104.cycu.org/reeborg">https://s104.cycu.org/reeborg</a><span> 在 Other worlds 下方點選 Alone 後, 按下 run 執行下列程式:</span></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">for i in range(4):
    for j in range(9):
        move()
    turn_left()</pre>
<p><img alt="" height="400" src="https://mde.tw/wcm2025/images/reeborg_walk_alone.gif" width="400"/></p>
<h2>Tutorial</h2>
<p><a href="https://aroberge.gitbooks.io/reeborg-s-world-advanced-world-creation/content/">https://aroberge.gitbooks.io/reeborg-s-world-advanced-world-creation/content/</a><span> </span>是《Reeborg的世界：教師指南》的線上書籍，旨在幫助教師利用 Reeborg 的世界（一個用於學習編程的平台）創建編程任務。作者 André Roberge 假設讀者具備 Python 或 JavaScript 的編程基礎，並主要使用 Python 範例進行講解。書籍介紹如何使用 Reeborg 的進階 API 設計更具挑戰性的世界，適合已熟悉基本界面並希望深入探索的教師。內容從基礎世界編輯開始，逐步加快 pace，並建議讀者在網站上運行範例以理解動態效果。後半部分提供簡要說明及附錄，包括範例世界列表。作者鼓勵教師分享自創世界，並提到自己是物理學背景，編程為自學愛好，Reeborg 的發展始於 2004 年的 RUR-PLE 項目。書籍免費線上提供，旨在促進編程教育。</p>
<p>以下是《Reeborg 的世界：教師指南》各章節的概要內容：</p>
<p>簡介 (Introduction)</p>
<p>概述書籍目的，幫助教師使用Reeborg的世界進階功能創建編程任務。假設讀者熟悉 Python 或 JavaScript，並介紹以 Python 為主的範例。強調適合進階用戶，並建議搭配網站實作。</p>
<p>世界編輯器簡介 (Introduction to the world editor)</p>
<p>介紹 Reeborg 世界編輯器的基本操作，如何創建和修改簡單的世界，作為進階設計的起點。</p>
<p>第一個簡單的範例世界 (A first simple example world)</p>
<p>提供一個基礎範例，展示如何使用編輯器設置任務環境，並解釋其運作原理。</p>
<p>加速步伐 (Picking up the pace)</p>
<p>進入更複雜的世界設計，介紹進階API功能，幫助教師快速構建具挑戰性的任務。</p>
<p>剩下的內容 (The rest)</p>
<p>概述後續內容結構，提供簡要說明，涵蓋更多進階設計技巧和注意事項。</p>
<p>附錄：範例世界列表 (Appendix: list of example worlds)</p>
<p>列出書中提到的範例世界，供讀者參考和測試。</p>
<p></p>
<div>
<p class="break-words">以下是《Reeborg的世界：教師指南》各章節中小節的簡要內容說明：</p>
<h4>1. 簡介 (Introduction)</h4>
<ul class="marker:text-secondary">
<li class="break-words"><strong>目的與對象</strong>：介紹書籍目標，幫助教師使用Reeborg進階功能設計編程任務，假設讀者具備Python或JavaScript基礎。</li>
<li class="break-words"><strong>技術假設</strong>：說明以Python為主，少量JavaScript，並建議熟悉基本界面後閱讀。</li>
<li class="break-words"><strong>學習建議</strong>：鼓勵搭配網站實作範例，理解動態效果。</li>
</ul>
<h4>2. 世界編輯器簡介 (Introduction to the world editor)</h4>
<ul class="marker:text-secondary">
<li class="break-words"><strong>編輯器概覽</strong>：介紹世界編輯器的介面與基本功能。</li>
<li class="break-words"><strong>基本操作</strong>：講解如何新增、移除元素（如牆壁、目標物）來創建簡單世界。</li>
<li class="break-words"><strong>儲存與測試</strong>：說明如何儲存設計並在Reeborg平台測試。</li>
</ul>
<h4>3. 第一個簡單的範例世界 (A first simple example world)</h4>
<ul class="marker:text-secondary">
<li class="break-words"><strong>範例介紹</strong>：展示一個簡單世界的設計，例如迷宮或收集物品任務。</li>
<li class="break-words"><strong>步驟分解</strong>：逐步解釋如何使用編輯器設置環境與任務條件。</li>
<li class="break-words"><strong>程式範例</strong>：提供對應的Python程式碼，展示Reeborg如何完成任務。</li>
</ul>
<h4>4. 加速步伐 (Picking up the pace)</h4>
<ul class="marker:text-secondary">
<li class="break-words"><strong>進階API介紹</strong>：講解更高階的API功能，如自訂物件、條件與動態變化。</li>
<li class="break-words"><strong>複雜世界設計</strong>：展示如何設計具挑戰性的任務，例如多條件或隨機元素。</li>
<li class="break-words"><strong>效率技巧</strong>：提供快速構建世界的方法與最佳實踐。</li>
</ul>
<h4>5. 剩下的內容 (The rest)</h4>
<ul class="marker:text-secondary">
<li class="break-words"><strong>內容概述</strong>：簡述後續未詳述的主題，作為進階設計的補充。</li>
<li class="break-words"><strong>實用建議</strong>：提供設計時的注意事項與常見問題解答。</li>
<li class="break-words"><strong>延伸資源</strong>：提及如何尋找更多靈感或支援。</li>
</ul>
<h4>6. 附錄：範例世界列表 (Appendix: list of example worlds)</h4>
<ul class="marker:text-secondary">
<li class="break-words"><strong>範例清單</strong>：列出書中出現的世界名稱與簡介。</li>
<li class="break-words"><strong>參考指引</strong>：提供如何在網站上找到並測試這些範例的指引。</li>
</ul>
<div>
<p class="break-words">我假設您指的是 Reeborg's World，這是一個用於教授程式設計（特別是 Python）的教育平台，最初由 André Roberge 開發。如果您想從 Reeborg 的原始碼建立一個可以在瀏覽器中運行的系統，我將提供一個逐步指南。請注意，這需要對 Web 開發（HTML、JavaScript 和 Python）有一定的了解，並假設您已經取得了 Reeborg 的開源程式碼（例如從其 GitHub 儲存庫）。</p>
<div>
<p class="break-words">我假設您指的是 Reeborg's World，這是一個用於教授程式設計（特別是 Python）的教育平台，最初由 André Roberge 開發。如果您想從 Reeborg 的原始碼建立一個可以在瀏覽器中運行的系統，我將提供一個逐步指南。請注意，這需要對 Web 開發（HTML、JavaScript 和 Python）有一定的了解，並假設您已經取得了 Reeborg 的開源程式碼（例如從其 GitHub 儲存庫）。</p>
<p class="break-words">Reeborg 開發相關倉儲:</p>
<p class="break-words"><a href="https://github.com/scrum-1/JavaScript30">https://github.com/scrum-1/JavaScript30</a></p>
<p class="break-words"><a href="https://github.com/scrum-1/reeborg">https://github.com/scrum-1/reeborg</a></p>
<p class="break-words"><a href="https://github.com/scrum-1/reeborg-dist">https://github.com/scrum-1/reeborg-dist</a></p>
<p class="break-words"><a href="https://github.com/scrum-1/reeborg-docs">https://github.com/scrum-1/reeborg-docs</a></p>
<p class="break-words"><a href="https://github.com/scrum-1/ideas">https://github.com/scrum-1/ideas</a></p>
<p class="break-words"><a href="https://github.com/scrum-1/mathematicalpython">https://github.com/scrum-1/mathematicalpython</a></p>
</div>
</div>
</div>
<h1>reeborg(期末)</h1>
<p></p>
<p>水平收割機器人:</p>
<p><a href="https://mdewcm2025.github.io/hw-kevingg601/reeborg/?lang=en&amp;mode=python&amp;name=Alone&amp;url=/hw-kevingg601/downloads/%E5%A0%B4%E6%99%AF/kevingg601.json&amp;editor=/hw-kevingg601/downloads/%E7%A8%8B%E5%BC%8F/keving601_%E6%B0%B4%E5%B9%B3%E6%94%B6%E5%89%B2.py">水平收割</a> &lt;------------連結在這裡</p>
<p><img alt="" height="415" src="/images/螢幕擷取畫面 2025-06-19 033805.png" width="800"/></p>
<p>螺旋收割機器人:</p>
<p><a href="https://mdewcm2025.github.io/hw-kevingg601/reeborg/?lang=en&amp;mode=python&amp;name=Alone&amp;url=/hw-kevingg601/downloads/%E5%A0%B4%E6%99%AF/kevingg601.json&amp;editor=/hw-kevingg601/downloads/%E7%A8%8B%E5%BC%8F/keving601_%E6%B0%B4%E5%B9%B3%E6%94%B6%E5%89%B2.py">螺旋收割</a> &lt;------------連結在這裡</p>
<p><img alt="" height="415" src="/images/螢幕擷取畫面 2025-06-19 034956.png" width="800"/></p><h1>Homework</h1>
<p>1. 作業 (40%): 從 Github Classroom 取得的個人倉儲與網站, 每週必須至少提交 2 次與課程進度有關的內容.</p>
<p style="padding-left: 30px;">作業一 (20%): 採用 <a href="https://nginx.org/">nginx</a> 建立全球資訊網伺服器</p>
<p style="padding-left: 60px;">在 Windows 操作系統中建立一台 WWW 伺服器</p>
<p style="padding-left: 60px;">在 Ubuntu 操作系統建立一台 WWW 伺服器</p>
<p style="padding-left: 60px;">在 虛擬主機上建立一台 WWW 伺服器 (Windows and Ubuntu)</p>
<p style="padding-left: 90px;">Virtualbox</p>
<p style="padding-left: 90px;">Vmware <a href="https://blogs.vmware.com/cloud-foundation/2024/11/11/vmware-fusion-and-workstation-are-now-free-for-all-users/">最近宣布</a>適用於 Windows 及 Linux 的 Vmware Workstation Pro (<a href="https://docs.vmware.com/en/VMware-Workstation-Pro/17.6/rn/vmware-workstation-176-pro-release-notes/index.html">17.6</a>), 與適用於 MacOS 的 Vmware Fusion Pro 全面免費.</p>
<p style="padding-left: 90px;"><a href="https://support.broadcom.com/group/ecx/productdownloads?subfamily=VMware+Workstation+Pro">下載 Vmware Workstation Pro</a> (For Windows and Linux) - 註冊帳號後下載 VMware-workstation-full-17.6.2.exe</p>
<p style="padding-left: 90px;"><a href="https://support.broadcom.com/group/ecx/productdownloads?subfamily=VMware+Fusion">下載 Vmware Fusion Pro</a> (For Mac) - 註冊帳號後下載</p>
<p style="padding-left: 30px;">作業二 (20%): 在各種不同環境下的操作系統中配置 <a href="https://mde.tw/reeborg/world.html">Reeborg's world</a> (<a href="https://github.com/mdecycu/reeborg">原始碼</a>)</p>
<h2>HW1</h2>
<p>作業一 (20%): 採用<span> </span><a href="https://nginx.org/">nginx</a><span> </span>建立全球資訊網伺服器</p>
<p>在 Windows 操作系統中建立一台 WWW 伺服器</p>
<p>在 Ubuntu 操作系統建立一台 WWW 伺服器</p>
<p>在 虛擬主機上建立一台 WWW 伺服器 (Windows and Ubuntu)</p>
<p>Virtualbox</p>
<p>利用<span> </span><a href="https://mde.tw/wcm2025/content/IPv6.html">https://mde.tw/wcm2025/content/IPv6.html</a><span> </span>中所分配的 IPv6 網址建立 Windows 與 Ubuntu 主機, 配置 nginx 伺服器.</p>
<p><a href="http://229.cycu.org/win10.vdi">http://229.cycu.org/win10.vdi</a> </p>
<p><a href="http://229.cycu.org/ubuntu.vdi">http://229.cycu.org/ubuntu.vdi</a> </p>
<p><span>操作步驟 (Windows)</span>:</p>
<ol>
<li>下載<span> </span><a href="http://229.cycu.org/win10.vdi">http://229.cycu.org/win10.vdi</a>, 在電腦中啟動 Virtualbox 後新增虛擬主機.</li>
<li>採用 win10.vdi 建立虛擬主機後, 將網路設為橋接後啟動.</li>
<li>登入後進入控制台利用個人的 IPv6 網址設定網路連線後, 在虛擬主機中下載安裝<span> </span><a href="https://nginx.org/en/download.html">nginx</a><span> </span>後測試是否可以正常從實體主機中連線.</li>
<li><a href="http://229.cycu.org/certbot.7z">http://229.cycu.org/certbot.7z</a> 設定 https</li>
<li>git clone <a href="https://github.com/mdecycu/reeborg.git">https://github.com/mdecycu/reeborg.git</a> 放入 nginx 系統中的 html 目錄</li>
<li>利用 <a href="http://localhost/reeborg/?lang=en&amp;mode=python&amp;menu=/reeborg/worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=/reeborg/worlds/tutorial_en/harvest1.json&amp;editor=https://mdewcm2025.github.io/hw-scrum-1/python/harvest1.py">http://localhost/reeborg/?lang=en&amp;mode=python&amp;menu=/reeborg/worlds/menus/select_collection_en.json&amp;name=Alone&amp;url=/reeborg/worlds/tutorial_en/harvest1.json&amp;editor=https://mdewcm2025.github.io/hw-scrum-1/python/harvest1.py</a> 進行測試.</li>
<li>就機械設計的專業而言, 之後可以用來開發類似: <a href="https://github.com/youandvern/efficalc">https://github.com/youandvern/efficalc</a> </li>
</ol>
<p><span style="background-color: #ffff00;"></span></p>
<p><span style="background-color: #ffff00;">成功使用nginx建立建立全球資訊網伺服器，並可以執行拔蘿蔔程式<img alt="laughing" src="/static/tinymce4/tinymce/plugins/emoticons/img/smiley-laughing.gif"/></span></p>
<p><img alt="" height="438" src="/images/螢幕擷取畫面 2025-05-15 102515.png" width="800"/></p>
<p><span style="background-color: #ffff00;">新增一張使用w10.mde.nfu.edu.tw進入nginx的圖片<img alt="laughing" src="/static/tinymce4/tinymce/plugins/emoticons/img/smiley-laughing.gif"/></span></p>
<p><span style="background-color: #ffcc00;"></span><img alt="" height="269" src="/images/螢幕擷取畫面 2025-05-15 110746.png" width="800"/></p>
<p><span style="background-color: #ffff00;"></span></p>
<p>要先啟動nginx，再進到tmp/site ---&gt;python start_waitress.py ⭣⭣⭣</p>
<p><span style="background-color: #ffff00;">使用nginx 取得w10.mde.nfu.edu.tw的https簽章 並成功用waitress啟動作業倉儲的動態網站⭣⭣⭣</span></p>
<p><img alt="" height="423" src="/images/螢幕擷取畫面 2025-06-05 120018.png" width="800"/></p>
<p><span>操作步驟 (Ubuntu)</span>:</p>
<ol>
<li>下載<span> </span><a href="http://229.cycu.org/ubuntu.vdi">http://229.cycu.org/ubuntu.vdi</a>, 在電腦中啟動 Virtualbox 後新增虛擬主機.</li>
<li>採用 Ubuntu.vdi 建立虛擬主機後, 將網路設為橋接後啟動.</li>
<li>登入後進入控制台利用個人的 IPv6 網址設定網路連線後, 在虛擬主機中下載安裝<span> </span><a href="https://nginx.org/en/download.html">nginx</a><span> </span>後測試是否可以正常從實體主機中連線. (例如:<span> </span><a href="http://stud.cycu.org/">http://stud.cycu.org/</a>)</li>
<li>Ubuntu 網路設定位於 /etc/netplan/<a href="https://mdewcm2025.github.io/hw-scrum-1/downloads/net.yaml">net.yaml</a>, 利用 vi 編輯器設定完成後, 以 sudo netplan apply 讓設定生效.</li>
<li>安裝 nginx, sudo apt install nginx, 之後設定檔案位於 /etc/nginx/sites-available/<a href="https://mdewcm2025.github.io/hw-scrum-1/downloads/default">default</a></li>
<li>修改 nginx 設定後, 以 sudo service nginx restart 重新啟動. (測試是否可以連線至: http://wxx.mde.nfu.edu.tw 或 https://wxx.mde.nfu.edu.tw)</li>
</ol>
<p><span>建立 github_帳號.github.io 倉儲與網站</span>:</p>
<ol>
<li>在 Github 中建立以帳號為名的 github.io, 將自動啟動 Github Pages 設定 (自動設定為與倉儲同名的網站)</li>
<li>登入 Github 後, 連線至<span> </span><a href="https://github.com/mdecycu/cmsimde_site,">https://github.com/mdecycu/cmsimde_site,</a><span> </span>Use this template 建立名稱為 github_帳號.github.io 倉儲.</li>
<li>在 Codespaces 或近端維護 github_帳號.github.io (例如: scrum-1.github.io).</li>
<li>在個人網站中建立 About, Courses, Certificates, Licenses, Contests, Misc 等 H1 頁面, 其中 About 可以放入個人簡介, Courses 則放入個人所修過課程的簡介與心得 (或成績), Certificates 放入各式英檢的內容, Licenses 則放入專業證照與實習項目介紹. Contests 則放入個人或團隊參賽紀錄. Misc 則放入尚未整理的瑣碎資料.</li>
<li>個人網頁中的 Blog 可以詳細記錄個人參與的事件過程, Reveal.js 則放入個人的線上簡報內容</li>
</ol>
<hr/>
<p>Vmware<span> </span><a href="https://blogs.vmware.com/cloud-foundation/2024/11/11/vmware-fusion-and-workstation-are-now-free-for-all-users/">最近宣布</a>適用於 Windows 及 Linux 的 Vmware Workstation Pro (<a href="https://docs.vmware.com/en/VMware-Workstation-Pro/17.6/rn/vmware-workstation-176-pro-release-notes/index.html">17.6</a>), 與適用於 MacOS 的 Vmware Fusion Pro 全面免費.</p>
<p><a href="https://support.broadcom.com/group/ecx/productdownloads?subfamily=VMware+Workstation+Pro">下載 Vmware Workstation Pro</a><span> </span>(For Windows and Linux) - 註冊帳號後下載 VMware-workstation-full-17.6.2.exe</p>
<p><a href="https://support.broadcom.com/group/ecx/productdownloads?subfamily=VMware+Fusion">下載 Vmware Fusion Pro</a><span> </span>(For Mac) - 註冊帳號後下載</p>
<h2>HW2</h2>
<p>作業二 (20%): 在各種不同環境下的操作系統中配置 <a href="https://mde.tw/reeborg/world.html">Reeborg's world</a> (<a href="https://github.com/mdecycu/reeborg">原始碼</a>)</p>
<h1>VirtualBox</h1>
<h2>win10</h2>
<p>使用VirtualBox建立一個win10虛擬主機</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="720" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Zb6hgYZUnO8?si=roArt3HPPSekB_yL" title="YouTube video player" width="1280"></iframe></p>
<h1>Midterm</h1>
<p>2. 期中協同專案執行、簡報與報告 (三人一組) (30%)</p>
<p style="padding-left: 30px;">專案題目: 利用 Copilot 解析 <a href="https://mde.tw/reeborg/world.html">Reeborg's world</a> (<a href="https://github.com/mdecycu/reeborg">原始碼</a>)</p>
<p style="padding-left: 30px;">期中報告:<a href="https://1drv.ms/p/c/ffffd886a2f6faa3/ER8CvbBon6pDiiJz_tylYPIBZG07CTGgYyPnLPSBOY_ivA?e=16Ubsg">網際內容管理期中報告.pptx</a></p>
<p><iframe frameborder="0" height="327" scrolling="no" src="https://1drv.ms/p/c/ffffd886a2f6faa3/IQQfAr2waJ-qQ4oic_7cpWDyATca9FnwrN_4zxlrhr2WPQQ" width="402"></iframe></p>
<h1>Final</h1>
<p>3. 期末協同專案執行、簡報與報告 (三人一組) (30%)</p>
<p style="padding-left: 30px;"><span>專案題目: 網際內容管理架構下的 <a href="https://mde.tw/reeborg/world.html">Reeborg's world</a> (<a href="https://github.com/mdecycu/reeborg">原始碼</a>)<br/></span></p>
<p style="padding-left: 60px;">利用 uwsgi 配置分組學員執行 cmsimde 動態內容管理系統編輯</p>
<p style="padding-left: 60px;">設法將 <a href="https://mde.tw/reeborg/world.html">Reeborg's world</a> (<a href="https://github.com/mdecycu/reeborg">原始碼</a>) 與 cmsimde 網際內容管理系統整合</p>
<p style="padding-left: 60px;"></p>
<h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p></p>